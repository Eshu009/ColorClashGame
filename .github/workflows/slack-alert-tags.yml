name: slack-tag-events

on:
  create:
    tags:
      - "v*"          # Include only versioned tags, e.g., v1.0.0
      - "!vercel*"    # Exclude Vercel-specific tags
      - "!code-rabbit*"  # Exclude Code Rabbit-specific tags
  delete:
    tags:
      - "v*"          # Include only versioned tags, e.g., v1.0.0
      - "!vercel*"    # Exclude Vercel-specific tags
      - "!code-rabbit*"  # Exclude Code Rabbit-specific tags

jobs:
  slack:
    runs-on: ubuntu-latest
    steps:
      - name: Verify Tag Event
        id: verify
        run: |
          # Verify that this is a tag event
          if [[ "${{ github.ref }}" != refs/tags/* ]]; then
            echo "Not a tag event. Skipping..."
            exit 0
          fi

          # Exclude Vercel or Code Rabbit tags
          if [[ "${{ github.ref }}" == refs/tags/vercel* || "${{ github.ref }}" == refs/tags/code-rabbit* ]]; then
            echo "Excluded tag from Vercel or Code Rabbit. Skipping..."
            exit 0
          fi

      - name: Send Slack Notification
        if: steps.verify.outcome == 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_HOOK_URL }}
        run: |
          # Extract event data
          EVENT_TYPE="${{ github.event_name }}"
          REF="${{ github.ref }}"
          ACTOR="${{ github.actor }}"
          REPO_NAME="${{ github.repository }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          TAG_NAME="${REF#refs/tags/}"
          TAG_URL="https://github.com/${{ github.repository }}/releases/tag/${TAG_NAME}"
          TIMESTAMP=$(date -u)

          # Determine action type
          if [[ "$EVENT_TYPE" == "create" ]]; then
            ACTION="Created"
          elif [[ "$EVENT_TYPE" == "delete" ]]; then
            ACTION="Deleted"
          fi

          # Get release information (if applicable)
          RELEASE_NAME="None"
          if [[ "$ACTION" == "Created" ]]; then
            RELEASE_NAME=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}" | \
              jq -r '.name // "None"')
          fi

          # Prepare the Slack message
          SLACK_MESSAGE="{
            \"blocks\": [
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \"Tag Event: $ACTION\",
                  \"emoji\": true
                }
              },
              {
                \"type\": \"section\",
                \"fields\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Tag Name:* <$TAG_URL|$TAG_NAME>\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Action:* $ACTION\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*User:* $ACTOR\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Repository:* <$REPO_URL|$REPO_NAME>\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Timestamp:* $TIMESTAMP\"
                  }
                ]
              }"

          if [[ "$ACTION" == "Created" ]]; then
            SLACK_MESSAGE="${SLACK_MESSAGE}, 
              {
                \"type\": \"section\",
                \"fields\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Release:* $RELEASE_NAME\"
                  }
                ]
              }"
          fi

          SLACK_MESSAGE="${SLACK_MESSAGE}
            ]
          }"

          # Send the Slack message
          curl -X POST \
            -H 'Content-type: application/json; charset=utf-8' \
            --data "$SLACK_MESSAGE" \
          $SLACK_WEBHOOK_URL
